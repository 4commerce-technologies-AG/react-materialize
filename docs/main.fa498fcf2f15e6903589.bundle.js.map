{"version":3,"file":"main.fa498fcf2f15e6903589.bundle.js","sources":["webpack:///./src/Button.js"],"sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport constants from './constants';\nimport cx from 'classnames';\nimport Icon from './Icon';\nimport idgen from './idgen';\n\nclass Button extends Component {\n  constructor(props) {\n    super(props);\n    this.renderIcon = this.renderIcon.bind(this);\n    this.renderFab = this.renderFab.bind(this);\n  }\n\n  componentDidMount() {\n    if (!M) return;\n\n    const { tooltip, tooltipOptions = {}, fab } = this.props;\n    if (tooltip) {\n      this.instance = M.Tooltip.init(this._btnEl, tooltipOptions);\n    }\n\n    if (fab) {\n      this.instance = M.FloatingActionButton.init(this._floatingActionBtn, fab);\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.instance) {\n      this.instance.destroy();\n    }\n  }\n\n  render() {\n    const {\n      className,\n      node,\n      fab,\n      modal,\n      flat,\n      floating,\n      large,\n      small,\n      disabled,\n      waves,\n      tooltip,\n      ...other\n    } = this.props;\n\n    let C = node;\n    let classes = {\n      btn: true,\n      disabled,\n      'waves-effect': waves\n    };\n\n    if (constants.WAVES.indexOf(waves) > -1) {\n      classes['waves-' + waves] = true;\n    }\n\n    let styles = { flat, floating, large, small };\n    constants.STYLES.forEach(style => {\n      if (styles[style]) {\n        classes.btn = false;\n        classes['btn-' + style] = true;\n      }\n    });\n\n    if (modal) {\n      classes['modal-' + modal] = true;\n    }\n    if (fab) {\n      return this.renderFab(cx(classes, className));\n    } else {\n      return (\n        <C\n          {...other}\n          disabled={!!disabled}\n          onClick={this.props.onClick}\n          className={cx(classes, className)}\n          ref={el => (this._btnEl = el)}\n          data-tooltip={tooltip}\n        >\n          {this.renderIcon()}\n          {this.props.children}\n        </C>\n      );\n    }\n  }\n\n  renderFab(classes) {\n    const { fab, floating, large, className, ...other } = this.props;\n    return (\n      <div\n        {...other}\n        ref={el => (this._floatingActionBtn = el)}\n        className={cx('fixed-action-btn')}\n      >\n        <a className={classes}>{this.renderIcon()}</a>\n        <ul>\n          {React.Children.map(this.props.children, child => {\n            return <li key={idgen()}>{child}</li>;\n          })}\n        </ul>\n      </div>\n    );\n  }\n\n  renderIcon() {\n    const { icon } = this.props;\n    if (!icon) return;\n\n    return <Icon>{icon}</Icon>;\n  }\n}\n\nButton.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  disabled: PropTypes.bool,\n  /**\n   * Enable other styles\n   */\n  flat: PropTypes.bool,\n  large: PropTypes.bool,\n  small: PropTypes.bool,\n  floating: PropTypes.bool,\n  /**\n   * Fixed action button\n   * If enabled, any children button will be rendered as actions, remember to provide an icon.\n   *  FAB Options are here: https://materializecss.com/floating-action-button.html#options\n   * @default false\n   * @default options {\n   *  direction: 'top',\n   *  hoverEnabled: true,\n   *  toolbarEnabled: false,\n   * }\n   */\n  fab: PropTypes.oneOfType([\n    PropTypes.bool,\n    PropTypes.shape({\n      direction: PropTypes.oneOf(['top', 'right', 'bottom', 'left']),\n      hoverEnabled: PropTypes.bool,\n      toolbarEnabled: PropTypes.bool\n    })\n  ]),\n  /**\n   * The icon to display, if specified it will create a button with the material icon.\n   */\n  icon: PropTypes.string,\n  modal: PropTypes.oneOf(['close', 'confirm']),\n  node: PropTypes.node,\n  /**\n   * Will be disabled when fab is set.\n   */\n  onClick: PropTypes.func,\n  /**\n   * Tooltip to show when mouse hovered\n   */\n  tooltip: PropTypes.string,\n  /**\n   * Tooltips options as here\n   * http://archives.materializecss.com/0.100.2/dialogs.html#tooltip\n   */\n  tooltipOptions: PropTypes.shape({\n    delay: PropTypes.number,\n    position: PropTypes.oneOf(['top', 'right', 'bottom', 'left']),\n    tooltip: PropTypes.string,\n    html: PropTypes.bool\n  }),\n  waves: PropTypes.oneOf([\n    'light',\n    'red',\n    'yellow',\n    'orange',\n    'purple',\n    'green',\n    'teal'\n  ])\n};\n\nButton.defaultProps = {\n  node: 'button'\n};\n\nexport default Button;\n"],"mappings":"AAOA","sourceRoot":""}